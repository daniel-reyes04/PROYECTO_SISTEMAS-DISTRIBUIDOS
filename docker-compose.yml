services:
  db:
    image: postgres:15
    container_name: cinesense_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - cinesense_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    env_file: .env

  rabbitmq:
    image: rabbitmq:3-management
    container_name: cinesense_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - cinesense_net
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q status"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    restart: always
    env_file: .env

  traefik:
    image: traefik:v2.10
    container_name: cinesense_traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.api.address=:8080
      - --api.dashboard=true
      - --api.insecure=true
    ports:
      - "80:80"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cinesense_net
    restart: always

  worker_inicial:
    build: ./workers
    container_name: cinesense_worker_inicial
    command: python worker_inicial.py
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file: .env
    restart: always
    networks:
      - cinesense_net
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  worker_emotion:
    build: ./workers
    container_name: cinesense_worker_emotion
    command: python worker_emotion.py
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file: .env
    restart: always
    networks:
      - cinesense_net
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  worker_recomendador:
    build: ./workers
    container_name: cinesense_worker_recomendador
    command: python worker_recomendador.py
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file: .env
    restart: always
    networks:
      - cinesense_net
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
  webapp:
    build: ./webapp
    container_name: cinesense_webapp
    ports:
      - "5000:5000"
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - cinesense_net



networks:
  cinesense_net:
    driver: bridge

volumes:
  db-data:

